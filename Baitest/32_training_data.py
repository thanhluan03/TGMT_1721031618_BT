# -*- coding: utf-8 -*-
"""32_training_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FelVa-fkT9H6XmvJ8q-DPSmLR5n_ZMEx
"""

# Import các thư viện cần thiết
import numpy as np
import cv2
import pandas as pd
import os
import pickle
from google.colab import drive
from google.colab.patches import cv2_imshow
from sklearn.model_selection import train_test_split

# Connect Google Drive
drive.mount('/content/drive')
path = '/content/drive/MyDrive/test_opencv/'
# Hiển thị tất cả thư mục hoặc file
os.listdir(path)

# Load data from pickle file
data = pickle.load(open("/content/drive/MyDrive/test_opencv/file_data_face_features.pickle", mode="rb"))

x = np.array(data['data'])
y = np.array(data['label'])

print(x)
print(y)

x.shape

y.shape

x = x.reshape(-1, 128)

x.shape

# chia nhỏ dữ liệu
x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.9, random_state=1)

x_train.shape, x_test.shape, y_train.shape, y_test.shape

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import VotingClassifier
from sklearn.metrics import classification_report, accuracy_score, f1_score

def get_report(model, x_train, y_train, x_test, y_test):
  y_pred_train = model.predict(x_train)
  y_pred_test = model.predict(x_test)

  # accuracy score
  acc_train = accuracy_score(y_train, y_pred_train)
  acc_test = accuracy_score(y_test, y_pred_test)

  # f1 score
  f1_score_train = f1_score(y_train, y_pred_train, average="macro")
  f1_score_test = f1_score(y_test, y_pred_test, average="macro")

  # print
  print('Accurency Train = %0.2f'%acc_train)
  print('Accurency Test = %0.2f'%acc_test)
  print('F1 Score Train = %0.2f'%f1_score_train)
  print('F1 Score Test = %0.2f'%f1_score_test)

# Logistic regression
model_logistic = LogisticRegression()
model_logistic.fit(x_train, y_train) # training

get_report(model_logistic, x_train, y_train, x_test, y_test)

# Support Vector Machines
model_svc = SVC(probability=True)
model_svc.fit(x_train, y_train)

get_report(model_svc, x_train, y_train, x_test, y_test)

# Random forest
model_rf = RandomForestClassifier(n_estimators=20,)
model_rf.fit(x_train, y_train)

# Voting Classifier
model_voting = VotingClassifier(estimators=[
    ('logistic', LogisticRegression()),
    ('svm', SVC(probability=True)),
    ('rf', RandomForestClassifier(n_estimators=20,)),
], voting='soft', weights=[2,3,1])

model_voting.fit(x_train, y_train)

get_report(model_voting, x_train, y_train, x_test, y_test)

# 3. Parameter Tuning
from sklearn.model_selection import GridSearchCV

model_grid = GridSearchCV(model_voting, param_grid={
    'svm__C': [3,5,7,10],
    'svm__gamma': [0.1, 0.3, 0.5],
    'rf__n_estimators': [5, 10,20],
    'rf__max_depth': [3, 5, 7],
    'voting': ['soft', 'hard']
}, scoring='accuracy', cv=3, n_jobs=1, verbose=2)

model_grid.fit(x_train, y_train)

model_best_estimator = model_grid.best_estimator_

model_grid.best_score_

# 4. Save Model
pickle.dump(model_best_estimator, open("/content/drive/MyDrive/test_opencv/ml_face_person_identity.pkl", mode='wb'))